/*
From the root directory run:
- npm start --> quick start
- npm run build --> to create deployable build
*/

my-app/
    client/
        /*
        Setup:
            1) npx create-react-app client
            2) npm install @reduxjs/toolkit react-redux
        */
        node_modules/
        public/
            index.html
        src/
            api/
                index.js <-- Has base route to api
                tasks.js <-- Api for getting route information from endpoints created in backend which link to database requests
            store/
                rootReducer.js <-- Combines all reducers
                store.js <-- Configures and creates store
            components/
                views/
                    home/
                        Home.js <-- Returns html, uses controllers
                        Home.css
                        homeSlice.js
                    tasks/
                        Task.js <-- Main html file for indidual task
                        Task.css <-- Css for individual task
                        Tasks.js <-- Main html file for all tasks structure
                        Tasks.css <-- Css for tasks.js
                        tasksSlice.js <-- Manages state of all tasks
                        taskActions.js <-- Performs different actions influecing tasks state
                    about/                    
                        About.js
                        About.css
                        aboutSlice.js
                    ...
                controllers/
                    HomeController.js <-- Makes requests to endpoints for data using fetch or axios, endpoints were set up in server.js --> routes --> controllers (using req, res to call model func) --> models (using input to get info or send info to database)
                    AboutController.js
                    ...
            App.js <-- Defines all routes and components to be called on each route
            index.js
            App.css
            routes.js <-- Sets up all routes in front-end which client can access
        package.json <-- cd client, npm start, to run client side
        package-lock.json
        .gitignore
        README.md

    server/
        /*
        Setup:
            1) npm init -y
            2) npm install
            3) npm install express body-parser cors morgan @supabase/supabase-js ...
        */
        node_modules/
        src/
            services/
                databaseService.js <-- Connects to supabase database
            models/
                homeModel.js <-- Makes request to database and returns result
                aboutModel.js
            controllers/
                homeController.js <-- Uses req params or body to call model function and respond with a status and data
                aboutController.js
            routes/
                homeRoutes.js
                aboutRoutes.js
            server.js <-- Collects all routes and sets up server with things like cors, bodyParser, port, etc
        package.json <-- Add "start": "node src/server.js", then run cd server, npm start, to run server
        package-lock.json
        .gitignore

    .env <-- Contains keys for supabase
    README.md

/*
Setting up Git Repo:
1) cd my-app
2) git init
3) Create repo on GitHub and find remote link
4) git remote add origin https://github.com/...
5) git add .
6) git commit -m "app shell"
7) git push -u origin main
*/


Quick Fixes for Common Issues
- If you get issue to do with React Hooks and useRef its
due to multiple versions of React so just run,
npm link client/node_modules/react